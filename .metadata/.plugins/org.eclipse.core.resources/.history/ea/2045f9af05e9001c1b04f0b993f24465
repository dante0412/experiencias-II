package vista;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import com.toedter.calendar.JDateChooser;

import entidad.Distrito;
import entidad.Usuario;
import mantenimiento.GestionDistritoDAO;
import mantenimiento.GestionUsuarioDAO;
import utils.Validaciones;

import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.awt.event.ActionEvent;
import javax.swing.JComboBox;
import javax.swing.ButtonGroup;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JRadioButton;
import javax.swing.JPasswordField;

public class FrmClientes extends JFrame implements ActionListener {

	private JPanel contentPane;
	private JLabel lblCodigo;
	private JLabel lblNombre;
	private JLabel lblApellido;
	private JLabel lblEmail;
	private JLabel lblTelefono;
	private JLabel lblDistrito;
	private JTextField txtCodigo;
	private JTextField txtNombre;
	private JTextField txtApellido;
	private JTextField txtUser;
	private JPasswordField txtClave;
	private JLabel lblFechaNac;
	private JDateChooser dcFecha;
	private JComboBox cboDistrito;
	ButtonGroup group = new ButtonGroup();
	DefaultTableModel model = new DefaultTableModel();
	
	GestionDistritoDAO gDis = new GestionDistritoDAO();
	GestionUsuarioDAO gUser = new GestionUsuarioDAO();
	private JTable tblClientes;
	private JScrollPane scrollPane;
	private JRadioButton rdbtnAgregar;
	private JRadioButton rdbtnActualizar;
	private JRadioButton rdbtnEliminar;
	private JButton btnAceptar;
	private JLabel lblCategoria;
	private JComboBox cboCategoria;

	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					FrmClientes frame = new FrmClientes();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public FrmClientes() {
//		setIconifiable(true);
//		setMaximizable(true);
//		setClosable(true);
		setTitle("Mantenimiento | Cliente");
		setBounds(100, 100, 799, 449);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		lblCodigo = new JLabel("C\u00F3digo");
		lblCodigo.setBounds(10, 10, 45, 13);
		contentPane.add(lblCodigo);
		
		lblNombre = new JLabel("Nombre");
		lblNombre.setBounds(10, 33, 45, 13);
		contentPane.add(lblNombre);
		
		lblApellido = new JLabel("Apellido");
		lblApellido.setBounds(10, 56, 64, 13);
		contentPane.add(lblApellido);
		
		lblEmail = new JLabel("Usuario");
		lblEmail.setBounds(10, 79, 45, 13);
		contentPane.add(lblEmail);
		
		lblTelefono = new JLabel("Clave");
		lblTelefono.setBounds(10, 102, 45, 13);
		contentPane.add(lblTelefono);
		
		lblDistrito = new JLabel("Distrito");
		lblDistrito.setBounds(10, 170, 45, 13);
		contentPane.add(lblDistrito);
		
		txtCodigo = new JTextField();
		txtCodigo.setHorizontalAlignment(SwingConstants.CENTER);
		txtCodigo.setText("Auto");
		txtCodigo.setEditable(false);
		txtCodigo.setBounds(140, 7, 200, 19);
		contentPane.add(txtCodigo);
		txtCodigo.setColumns(10);
		
		txtNombre = new JTextField();
		txtNombre.setColumns(10);
		txtNombre.setBounds(140, 30, 200, 19);
		contentPane.add(txtNombre);
		
		txtApellido = new JTextField();
		txtApellido.setColumns(10);
		txtApellido.setBounds(140, 53, 200, 19);
		contentPane.add(txtApellido);
		
		txtUser = new JTextField();
		txtUser.setColumns(10);
		txtUser.setBounds(140, 76, 200, 19);
		contentPane.add(txtUser);
		
		txtClave = new JPasswordField();
		txtClave.setColumns(10);
		txtClave.setBounds(140, 99, 200, 19);
		contentPane.add(txtClave);
		
		lblFechaNac = new JLabel("Fecha de Nacimiento");
		lblFechaNac.setBounds(10, 122, 122, 13);
		contentPane.add(lblFechaNac);
		
		dcFecha = new JDateChooser();
		dcFecha.setBounds(140, 122, 200, 19);
		contentPane.add(dcFecha);
		
		cboDistrito = new JComboBox();
		cboDistrito.setBounds(140, 170, 200, 21);
		contentPane.add(cboDistrito);
		
		scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 202, 763, 206);
		contentPane.add(scrollPane);
		
		tblClientes = new JTable();
		scrollPane.setViewportView(tblClientes);
		model.addColumn("Código");
		model.addColumn("Nombres Completos");
		model.addColumn("Usuario");
		model.addColumn("Contraseña");
		model.addColumn("Fecha");
		model.addColumn("Categoria");
		model.addColumn("Distrito");
		tblClientes.setModel(model);
		
		rdbtnAgregar = new JRadioButton("Agregar");
		rdbtnAgregar.setSelected(true);
		rdbtnAgregar.setBounds(664, 39, 109, 23);
		contentPane.add(rdbtnAgregar);
		
		rdbtnActualizar = new JRadioButton("Actualizar");
		rdbtnActualizar.setBounds(664, 67, 109, 23);
		contentPane.add(rdbtnActualizar);
		
		rdbtnEliminar = new JRadioButton("Eliminar");
		rdbtnEliminar.setBounds(664, 95, 109, 23);
		contentPane.add(rdbtnEliminar);
		
		btnAceptar = new JButton("Aceptar");
		btnAceptar.setBounds(664, 136, 89, 23);
		contentPane.add(btnAceptar);
		
		group.add(rdbtnEliminar);
		group.add(rdbtnActualizar);
		group.add(rdbtnAgregar);
		
		lblCategoria = new JLabel("Categoria");
		lblCategoria.setBounds(10, 145, 109, 14);
		contentPane.add(lblCategoria);
		
		cboCategoria = new JComboBox();
		cboCategoria.setBounds(140, 145, 200, 22);
		contentPane.add(cboCategoria);
		
		cargarCombo();
	}
	public void actionPerformed(ActionEvent e) {
	}
	
	private void limpiarCajas() {
		txtNombre.setText("");
		txtApellido.setText("");
		txtUser.setText("");
		txtClave.setText("");
		cboDistrito.setSelectedIndex(0);
		dcFecha.setDate(null);
		txtNombre.requestFocus();
		
	}
	
	private void registrarUser() {
		String nomb, ape, user, clave, fecha;
		int distrito, categ;
		
		nomb = getNombre();
		ape = getApellido();
		user = getUser();
		clave = getClave();
		fecha = getFecha();
		categ = getCategoria();
		distrito = getDistrito();
		
		if(nomb == null || ape == null || user == null || clave == null || fecha == null || categ == 0 || distrito == 0) {
			return;
		}else {
			Usuario u = new Usuario();
			
			u.setNombre(nomb);
			u.setApellido(ape);
			u.setUsuraio(user);;
			u.setClave(clave);;
			u.setfNacim(fecha);
			u.setCategoria(categ);
			u.setDistrito(distrito);
			
			int res = gUser.registrar(u);
			
			if(res == 0) {
				mensajeError("Error en el registro");
			}else {
				mensajeExitoso("Registro Exitoso");
			}
		}
	}

	private int getCategoria() {
		int categ = 0;
		categ = cboCategoria.getSelectedIndex();
		if(categ == 0) {
			mensajeError("Seleccione una categoria");
		}
		return categ;
	}

	private int getDistrito() {
		int distrito = 0;
		distrito = cboDistrito.getSelectedIndex();
		if(distrito == 0){
			mensajeError("Selecione un distrito");
		}
		return distrito;
	}

	private String getFecha() {
		String fec = null;
		if(dcFecha.getDate() == null){
			mensajeError("Ingresar una fecha de nacimiento");
		}else{
			fec = new SimpleDateFormat("yyyy/MM/dd").format(dcFecha.getDate());
		}
		return fec;
	}

	private String getUser() {
		String user = null;
		if(txtUser.getText().trim().length() == 0) {
			mensajeError("Ingrese un usuario");
			txtUser.requestFocus();
		}else if(txtUser.getText().trim().matches(Validaciones.USER)) {
			user = txtUser.getText().trim();
		}else {
			mensajeError("Formato de usuario incorrecto, Ingresar U000");
			txtUser.setText("");
			txtUser.requestFocus();
		}
		return user;
	}

	private String getClave() {
		String pass = null;
		if(String.valueOf(txtClave.getPassword()).trim().length() == 0) {
			mensajeError("Ingrese una contraseña");
			txtClave.requestFocus();
		}else {
			pass = String.valueOf(txtClave.getPassword());
		}
		
		return pass;
	}

	private String getApellido() {
		String ape = null;
		if(txtApellido.getText().trim().length() == 0) {
			mensajeError("Ingrese un apellido");
			txtApellido.requestFocus();
		}else if(txtApellido.getText().trim().matches(Validaciones.APELLIDO)) {
			ape = txtApellido.getText().trim();
		}else {
			mensajeError("Formato de apellido incorrecto, Ingresar de 3 a 30 letras");
			txtApellido.setText("");
			txtApellido.requestFocus();
		}
		return ape;
	}

	private String getNombre() {
		String nomb = null;
		if(txtNombre.getText().trim().length() == 0) {
			mensajeError("Ingrese un nombre");
			txtNombre.requestFocus();
		}else if(txtNombre.getText().trim().matches(Validaciones.NOMBRE)) {
			nomb = txtNombre.getText().trim();
		}else {
			mensajeError("Formato de nombre incorrecto, Ingresar de 3 a 30 letras");
			txtNombre.setText("");
			txtNombre.requestFocus();
		}
		return nomb;
	}

	private void mensajeError(String msj) {
		JOptionPane.showMessageDialog(this, msj, "Error !!!", 0);
		
	}
	
	private void mensajeExitoso(String msj) {
		JOptionPane.showMessageDialog(this, msj, "Exito ", 1);
		
	}
	
	private void cargarCombo() {
		ArrayList<Distrito> listaDistrito = gDis.listaDistrito();
		
		if (listaDistrito.size() == 0) {
			mensajeError("Lista Vacia");
		}else {
			cboDistrito.addItem("Seleccione ...");
			for(Distrito distrito : listaDistrito) {
				cboDistrito.addItem(distrito.getCodigo() + " - " + distrito.getDescripcion());
			}
		}
	}
}
